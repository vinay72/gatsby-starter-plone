{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/RichText.js","webpack:///./src/components/Header/Header.js","webpack:///./src/components/Breadcrumbs/Breadcrumbs.js","webpack:///./src/components/NavBar/NavBar.js","webpack:///./src/components/Layout/Layout.js","webpack:///./src/components/Layout/index.js","webpack:///./src/components/Document.js","webpack:///./src/components/Folder/Folder.js","webpack:///./src/components/Folder/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_Document__WEBPACK_IMPORTED_MODULE_2__","_components_Folder__WEBPACK_IMPORTED_MODULE_3__","_ref","data","a","createElement","ploneDocument","style","background","ploneSite","title","serialized","images","files","react__WEBPACK_IMPORTED_MODULE_6___default","Object","react_serialize__WEBPACK_IMPORTED_MODULE_9__","components","Link","byPath","reduce","map","file","set","_path","Map","get","to","href","publicURL","download","filename","children","gatsby__WEBPACK_IMPORTED_MODULE_7__","ResolveLink","Img","image","src","gatsby_image__WEBPACK_IMPORTED_MODULE_8___default","Tag","resolutions","childImageSharp","fixed","alt","ResolveImage","components_Header_Header","siteData","react_default","margin","maxWidth","padding","className","subTitle","components_Breadcrumbs_Breadcrumbs","gatsby_browser_entry","items","item","key","_id","components_NavBar_NavBar","active","render","ploneNavigation","filter","startsWith","_51587645","Layout_Layout_Layout","breadcrumbs","node","length","props","Fragment","Helmet_default","site","siteMetadata","meta","name","content","paddingTop","marginTop","_3150157449","propTypes","prop_types_default","isRequired","components_Layout_Layout","_RichText__WEBPACK_IMPORTED_MODULE_1__","_ref$images","_ref$files","description","text","react","components_Folder_Folder","listedTypes","Set","result","RichText","has","_type"],"mappings":"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","file":"component---src-pages-index-js-271535ce8d612c69a9f2.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport Document from '../components/Document';\nimport Folder from '../components/Folder';\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <Document data={data.ploneDocument} />\n    <hr style={{ background: '#e8eef2' }} />\n    <Folder data={data.ploneSite} title=\"Contents\" />\n  </Layout>\n);\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query IndexPageQuery {\n    ploneDocument(_path: { eq: \"/frontpage/\" }) {\n      ...Document\n    }\n    ploneSite(_path: { eq: \"/\" }) {\n      ...Site\n    }\n  }\n`;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { deserialize } from 'react-serialize';\n\nconst ResolveImage = images => data => {\n  let byPath = images.reduce(\n    (map, image) => map.set(image._path, image),\n    new Map()\n  );\n  if (byPath.get(data.src)) {\n    return (\n      <Img\n        Tag=\"span\"\n        resolutions={byPath.get(data.src).image.childImageSharp.fixed}\n      />\n    );\n  } else {\n    return <img src={data.src} alt={data.alt} title={data.title} />;\n  }\n};\n\nconst ResolveLink = files => data => {\n  let byPath = files.reduce(\n    (map, file) => map.set(file._path, file),\n    new Map()\n  );\n  if (byPath.get(data.to)) {\n    return (\n      <a\n        href={byPath.get(data.to).file.publicURL}\n        download={byPath.get(data.to).file.filename}\n      >\n        {data.children}\n      </a>\n    );\n  } else {\n    return <Link to={data.to}>{data.children}</Link>;\n  }\n};\n\nconst RichText = ({ serialized, images, files }) => (\n  <div>\n    {deserialize(serialized, {\n      components: {\n        Link: ResolveLink(files),\n        Img: ResolveImage(images),\n      },\n    })}\n  </div>\n);\n\nexport default RichText;\n\nexport const query = graphql`\n  fragment Image on PloneImage {\n    id\n    title\n    image {\n      publicURL\n      childImageSharp {\n        fixed(width: 600) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    _path\n  }\n\n  fragment File on PloneFile {\n    id\n    title\n    description\n    file {\n      filename\n      publicURL\n    }\n    _type\n    _path\n  }\n`;\n","import React from 'react';\n\nimport './Header.css';\n\nconst Header = ({ siteData }) => (\n  <header\n    style={{\n      background: '#113156',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <div className=\"title\">{siteData.title}</div>\n      <div className=\"sub-title\">{siteData.subTitle}</div>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './Breadcrumbs.css';\n\nconst Breadcrumbs = ({ data }) => (\n  <nav className=\"breadcrumb-container\">\n    <ol className=\"breadcrumb\">\n      <li className=\"breadcrumb-item\">\n        <Link to=\"/\">Home</Link>\n      </li>\n      {data.items.map(item => (\n        <li key={item._id} className=\"breadcrumb-item\">\n          <Link to={item._path}>{item.title}</Link>\n        </li>\n      ))}\n    </ol>\n  </nav>\n);\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport './NavBar.css';\n\nconst NavBar = ({ active }) => (\n  <StaticQuery\n    query={graphql`\n      query NavbarQuery {\n        ploneNavigation(_path: { eq: \"/\" }) {\n          items {\n            _id\n            _path\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <nav className=\"navbar\">\n        <div className=\"navbar-container\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            Gatsby Starter Plone\n          </Link>\n          <ol className=\"navbar-menu\">\n            <li className=\"navbar-item\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            {data.ploneNavigation.items\n              .filter(item => item._path !== '/')\n              .map(item => (\n                <li\n                  key={item._id}\n                  className={\n                    item._path === active ||\n                    (active || '').startsWith(item._path)\n                      ? 'navbar-item active'\n                      : 'navbar-item'\n                  }\n                >\n                  <Link to={item._path}>{item.title}</Link>\n                </li>\n              ))}\n          </ol>\n        </div>\n      </nav>\n    )}\n  />\n);\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport Header from '../Header';\nimport './Layout.css';\nimport Breadcrumbs from '../Breadcrumbs';\nimport NavBar from '../NavBar';\n\nconst Layout = ({ breadcrumbs, children, data }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            subTitle\n          }\n        }\n      }\n    `}\n    render={data => {\n      const node = children.length\n        ? children[0].props.data\n        : children.props.data;\n      const active = node\n        ? node._path === '/frontpage/'\n          ? '/'\n          : node._path\n        : null;\n      return (\n        <>\n          <Helmet\n            title={data.site.siteMetadata.title}\n            meta={[\n              { name: 'description', content: 'Gatsby Starter Plone' },\n              { name: 'keywords', content: 'gatsby, plone' },\n            ]}\n          />\n          <NavBar active={active} />\n          <Header siteData={data.site.siteMetadata} />\n          {breadcrumbs && <Breadcrumbs data={breadcrumbs} />}\n          <div\n            style={{\n              margin: '0 auto',\n              maxWidth: 960,\n              padding: '0px 1.0875rem 1.45rem',\n              paddingTop: 0,\n              marginTop: '2em',\n            }}\n          >\n            {children}\n          </div>\n        </>\n      );\n    }}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","export { default } from './Layout';\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport RichText from './RichText';\n\nconst Document = ({ data, images = [], files = [] }) => (\n  <article key={data._id}>\n    <h1>{data.title}</h1>\n    {data.description ? (\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n    ) : null}\n    {data.text ? (\n      <RichText serialized={data.text.react} images={images} files={files} />\n    ) : null}\n  </article>\n);\n\nexport default Document;\n\nexport const query = graphql`\n  fragment Document on PloneDocument {\n    id\n    title\n    description\n    text {\n      react\n    }\n    _path\n  }\n`;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport RichText from '../RichText';\n\nimport './Folder.css';\n\nconst Folder = ({ data, title, images = [], files = [] }) => {\n  const listedTypes = new Set([\n    'Document',\n    'Folder',\n    'News Item',\n    'Event',\n    'Collection',\n    'File',\n  ]);\n  let byPath = files.reduce(function(result, file) {\n    result[file._path] = file;\n    return result;\n  }, {});\n  return (\n    <nav key={data._id}>\n      <h1>{title ? title : data.title}</h1>\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n      {data.text ? (\n        <RichText serialized={data.text.react} images={images} files={files} />\n      ) : null}\n      <ul className=\"list-group\">\n        {data.items\n          .filter(\n            item => listedTypes.has(item._type) && item._path !== '/docs/index/'\n          )\n          .map(item => (\n            <li key={item._path} className=\"list-group-item\">\n              <p>\n                {byPath[item._path] ? (\n                  <a\n                    href={byPath[item._path].file.publicURL}\n                    download={byPath[item._path].file.filename}\n                  >\n                    {item.title}\n                  </a>\n                ) : (\n                  <Link to={item._path}>{item.title}</Link>\n                )}\n              </p>\n              {item.description ? <p>{item.description}</p> : null}\n            </li>\n          ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Folder;\n\nexport const query = graphql`\n  fragment Site on PloneSite {\n    id\n    title\n    items {\n      _id\n      _path\n      _type\n      description\n      title\n    }\n    _path\n  }\n\n  fragment Folder on PloneFolder {\n    id\n    title\n    description\n    items {\n      _id\n      _path\n      _type\n      description\n      title\n    }\n    _path\n  }\n`;\n","export { default } from './Folder';\n"],"sourceRoot":""}