{"version":3,"sources":["webpack:///./src/components/Event.js","webpack:///./src/components/NewsItem.js","webpack:///./src/templates/default.js","webpack:///./src/components/RichText.js","webpack:///./src/components/Header/Header.js","webpack:///./src/components/Breadcrumbs/Breadcrumbs.js","webpack:///./src/components/NavBar/NavBar.js","webpack:///./src/components/Layout/Layout.js","webpack:///./src/components/Layout/index.js","webpack:///./src/components/Document.js","webpack:///./src/components/Folder/Folder.js","webpack:///./src/components/Folder/index.js"],"names":["components_Event","_ref","data","images","files","react_default","a","createElement","key","_id","title","start","description","RichText","serialized","text","react","components_NewsItem","gatsby_image_default","resolutions","image","childImageSharp","fixed","created","__webpack_exports__","Layout","breadcrumbs","ploneBreadcrumbs","nodes","query","map","edge","node","Document","Folder","default_componentFor","default_query","react__WEBPACK_IMPORTED_MODULE_6___default","Object","react_serialize__WEBPACK_IMPORTED_MODULE_9__","components","Link","byPath","reduce","file","set","_path","Map","get","to","href","publicURL","download","filename","children","gatsby__WEBPACK_IMPORTED_MODULE_7__","ResolveLink","Img","src","gatsby_image__WEBPACK_IMPORTED_MODULE_8___default","Tag","alt","ResolveImage","components_Header_Header","siteData","style","background","margin","maxWidth","padding","className","subTitle","components_Breadcrumbs_Breadcrumbs","gatsby_browser_entry","items","item","components_NavBar_NavBar","active","render","ploneNavigation","filter","startsWith","_51587645","Layout_Layout_Layout","length","props","Fragment","Helmet_default","site","siteMetadata","meta","name","content","paddingTop","marginTop","_3150157449","propTypes","prop_types_default","isRequired","components_Layout_Layout","__webpack_require__","d","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_RichText__WEBPACK_IMPORTED_MODULE_1__","_ref$images","_ref$files","components_Folder_Folder","listedTypes","Set","result","has","_type"],"mappings":"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","file":"component---src-templates-default-js-9c9ca3518574be873200.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport RichText from './RichText';\n\nconst Event = ({ data, images, files }) => (\n  <article key={data._id}>\n    <h1>{data.title}</h1>\n    <p>\n      <small>\n        Begins <em>{data.start}</em>\n      </small>\n    </p>\n    {data.description ? (\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n    ) : null}\n    <RichText serialized={data.text.react} images={images} files={files} />\n  </article>\n);\n\nexport default Event;\n\nexport const query = graphql`\n  fragment Event on PloneEvent {\n    id\n    title\n    description\n    start(formatString: \"MMMM Do, YYYY @ HH:MM\")\n    text {\n      react\n    }\n    _path\n  }\n`;\n","import React from 'react';\nimport Img from 'gatsby-image';\nimport { graphql } from 'gatsby';\nimport RichText from './RichText';\n\nconst NewsItem = ({ data, images, files }) => (\n  <article key={data._id}>\n    <h1>{data.title}</h1>\n    <Img resolutions={data.image.childImageSharp.fixed} />\n    <p>\n      <small>\n        Published on <em>{data.created}</em>\n      </small>\n    </p>\n    {data.description ? (\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n    ) : null}\n    <RichText serialized={data.text.react} images={images} files={files} />\n  </article>\n);\n\nexport default NewsItem;\n\nexport const query = graphql`\n  fragment NewsItem on PloneNewsItem {\n    id\n    title\n    description\n    created(formatString: \"MMMM Do, YYYY\")\n    image {\n      childImageSharp {\n        fixed(width: 200) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    text {\n      react\n    }\n    _path\n  }\n`;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Document from '../components/Document';\nimport Event from '../components/Event';\nimport Folder from '../components/Folder';\nimport Layout from '../components/Layout';\nimport NewsItem from '../components/NewsItem';\n\nconst componentFor = data => {\n  const nodes = query => (query ? query['edges'] : []).map(edge => edge.node);\n  if (data) {\n    if (data['ploneDocument']) {\n      return (\n        <Document\n          data={data['ploneDocument']}\n          images={nodes(data['allPloneImage'])}\n          files={nodes(data['allPloneFile'])}\n        />\n      );\n    } else if (data['ploneEvent']) {\n      return (\n        <Event\n          data={data['ploneEvent']}\n          images={nodes(data['allPloneImage'])}\n          files={nodes(data['allPloneFile'])}\n        />\n      );\n    } else if (data['ploneFolder']) {\n      return (\n        <Folder\n          data={data['ploneFolder']}\n          images={nodes(data['allPloneImage'])}\n          files={nodes(data['allPloneFile'])}\n        />\n      );\n    } else if (data['ploneNewsItem']) {\n      return (\n        <NewsItem\n          data={data['ploneNewsItem']}\n          images={nodes(data['allPloneImage'])}\n          files={nodes(data['allPloneFile'])}\n        />\n      );\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst DefaultLayout = ({ data }) => (\n  <Layout breadcrumbs={data.ploneBreadcrumbs}>{componentFor(data)}</Layout>\n);\n\nexport default DefaultLayout;\n\nexport const query = graphql`\n  query DefaultTemplateQuery($path: String!) {\n    ploneDocument(_path: { eq: $path }) {\n      ...Document\n    }\n    ploneEvent(_path: { eq: $path }) {\n      ...Event\n    }\n    ploneFolder(_path: { eq: $path }) {\n      ...Folder\n    }\n    ploneNewsItem(_path: { eq: $path }) {\n      ...NewsItem\n    }\n    allPloneFile(filter: { _backlinks: { eq: $path } }) {\n      edges {\n        node {\n          ...File\n        }\n      }\n    }\n    allPloneImage(filter: { _backlinks: { eq: $path } }) {\n      edges {\n        node {\n          ...Image\n        }\n      }\n    }\n    ploneBreadcrumbs(_path: { eq: $path }) {\n      items {\n        _id\n        _path\n        title\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { deserialize } from 'react-serialize';\n\nconst ResolveImage = images => data => {\n  let byPath = images.reduce(\n    (map, image) => map.set(image._path, image),\n    new Map()\n  );\n  if (byPath.get(data.src)) {\n    return (\n      <Img\n        Tag=\"span\"\n        resolutions={byPath.get(data.src).image.childImageSharp.fixed}\n      />\n    );\n  } else {\n    return <img src={data.src} alt={data.alt} title={data.title} />;\n  }\n};\n\nconst ResolveLink = files => data => {\n  let byPath = files.reduce(\n    (map, file) => map.set(file._path, file),\n    new Map()\n  );\n  if (byPath.get(data.to)) {\n    return (\n      <a\n        href={byPath.get(data.to).file.publicURL}\n        download={byPath.get(data.to).file.filename}\n      >\n        {data.children}\n      </a>\n    );\n  } else {\n    return <Link to={data.to}>{data.children}</Link>;\n  }\n};\n\nconst RichText = ({ serialized, images, files }) => (\n  <div>\n    {deserialize(serialized, {\n      components: {\n        Link: ResolveLink(files),\n        Img: ResolveImage(images),\n      },\n    })}\n  </div>\n);\n\nexport default RichText;\n\nexport const query = graphql`\n  fragment Image on PloneImage {\n    id\n    title\n    image {\n      publicURL\n      childImageSharp {\n        fixed(width: 600) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    _path\n  }\n\n  fragment File on PloneFile {\n    id\n    title\n    description\n    file {\n      filename\n      publicURL\n    }\n    _type\n    _path\n  }\n`;\n","import React from 'react';\n\nimport './Header.css';\n\nconst Header = ({ siteData }) => (\n  <header\n    style={{\n      background: '#113156',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <div className=\"title\">{siteData.title}</div>\n      <div className=\"sub-title\">{siteData.subTitle}</div>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './Breadcrumbs.css';\n\nconst Breadcrumbs = ({ data }) => (\n  <nav className=\"breadcrumb-container\">\n    <ol className=\"breadcrumb\">\n      <li className=\"breadcrumb-item\">\n        <Link to=\"/\">Home</Link>\n      </li>\n      {data.items.map(item => (\n        <li key={item._id} className=\"breadcrumb-item\">\n          <Link to={item._path}>{item.title}</Link>\n        </li>\n      ))}\n    </ol>\n  </nav>\n);\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport './NavBar.css';\n\nconst NavBar = ({ active }) => (\n  <StaticQuery\n    query={graphql`\n      query NavbarQuery {\n        ploneNavigation(_path: { eq: \"/\" }) {\n          items {\n            _id\n            _path\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <nav className=\"navbar\">\n        <div className=\"navbar-container\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            Gatsby Starter Plone\n          </Link>\n          <ol className=\"navbar-menu\">\n            <li className=\"navbar-item\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            {data.ploneNavigation.items\n              .filter(item => item._path !== '/')\n              .map(item => (\n                <li\n                  key={item._id}\n                  className={\n                    item._path === active ||\n                    (active || '').startsWith(item._path)\n                      ? 'navbar-item active'\n                      : 'navbar-item'\n                  }\n                >\n                  <Link to={item._path}>{item.title}</Link>\n                </li>\n              ))}\n          </ol>\n        </div>\n      </nav>\n    )}\n  />\n);\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport Header from '../Header';\nimport './Layout.css';\nimport Breadcrumbs from '../Breadcrumbs';\nimport NavBar from '../NavBar';\n\nconst Layout = ({ breadcrumbs, children, data }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            subTitle\n          }\n        }\n      }\n    `}\n    render={data => {\n      const node = children.length\n        ? children[0].props.data\n        : children.props.data;\n      const active = node\n        ? node._path === '/frontpage/'\n          ? '/'\n          : node._path\n        : null;\n      return (\n        <>\n          <Helmet\n            title={data.site.siteMetadata.title}\n            meta={[\n              { name: 'description', content: 'Gatsby Starter Plone' },\n              { name: 'keywords', content: 'gatsby, plone' },\n            ]}\n          />\n          <NavBar active={active} />\n          <Header siteData={data.site.siteMetadata} />\n          {breadcrumbs && <Breadcrumbs data={breadcrumbs} />}\n          <div\n            style={{\n              margin: '0 auto',\n              maxWidth: 960,\n              padding: '0px 1.0875rem 1.45rem',\n              paddingTop: 0,\n              marginTop: '2em',\n            }}\n          >\n            {children}\n          </div>\n        </>\n      );\n    }}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","export { default } from './Layout';\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport RichText from './RichText';\n\nconst Document = ({ data, images = [], files = [] }) => (\n  <article key={data._id}>\n    <h1>{data.title}</h1>\n    {data.description ? (\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n    ) : null}\n    {data.text ? (\n      <RichText serialized={data.text.react} images={images} files={files} />\n    ) : null}\n  </article>\n);\n\nexport default Document;\n\nexport const query = graphql`\n  fragment Document on PloneDocument {\n    id\n    title\n    description\n    text {\n      react\n    }\n    _path\n  }\n`;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport RichText from '../RichText';\n\nimport './Folder.css';\n\nconst Folder = ({ data, title, images = [], files = [] }) => {\n  const listedTypes = new Set([\n    'Document',\n    'Folder',\n    'News Item',\n    'Event',\n    'Collection',\n    'File',\n  ]);\n  let byPath = files.reduce(function(result, file) {\n    result[file._path] = file;\n    return result;\n  }, {});\n  return (\n    <nav key={data._id}>\n      <h1>{title ? title : data.title}</h1>\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n      {data.text ? (\n        <RichText serialized={data.text.react} images={images} files={files} />\n      ) : null}\n      <ul className=\"list-group\">\n        {data.items\n          .filter(\n            item => listedTypes.has(item._type) && item._path !== '/docs/index/'\n          )\n          .map(item => (\n            <li key={item._path} className=\"list-group-item\">\n              <p>\n                {byPath[item._path] ? (\n                  <a\n                    href={byPath[item._path].file.publicURL}\n                    download={byPath[item._path].file.filename}\n                  >\n                    {item.title}\n                  </a>\n                ) : (\n                  <Link to={item._path}>{item.title}</Link>\n                )}\n              </p>\n              {item.description ? <p>{item.description}</p> : null}\n            </li>\n          ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Folder;\n\nexport const query = graphql`\n  fragment Site on PloneSite {\n    id\n    title\n    items {\n      _id\n      _path\n      _type\n      description\n      title\n    }\n    _path\n  }\n\n  fragment Folder on PloneFolder {\n    id\n    title\n    description\n    items {\n      _id\n      _path\n      _type\n      description\n      title\n    }\n    _path\n  }\n`;\n","export { default } from './Folder';\n"],"sourceRoot":""}